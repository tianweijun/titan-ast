
/*
*
* titan language parser 
*
*/


@StartGrammar compilationUnit ;

@NonterminalGrammar begin ;

constLiteral :
  MinusSign? UnsignedIntegerLiteral  #integerLiteral
  | MinusSign? UnsignedFloatingPointNumberLiteral #floatingPointNumberLiteral
  | CharLiteral #charLiteral
  | StringLiteral #stringLiteral
;

// ---------------------generics start----------------------

genericArgument : instanceTypeName ;
genericArgumentList : genericArgument (Comma genericArgument)* ;
genericArguments : LessThanSign genericArgumentList GreaterThanSign ;

genericParameterBounds : plainInstanceTypeName ( Ampersand plainInstanceTypeName )* ;
genericParameter : identifier ( Colon genericParameterBounds )? ;
genericParameterList : genericParameter ( Comma genericParameter)* ;
genericParameters :
  LessThanSign genericParameterList GreaterThanSign
;

// ---------------------generics end------------------------

// --------------------path start-------------------------

pathSegment : identifier ;
rootPathSegment : LeftBracket RightBracket ;
cratePathSegment : LeftBracket Crate RightBracket ;
superPathSegment : LeftBracket Super RightBracket ;

plainPath : pathSegment  (Colon Colon pathSegment)* ;
// 具名路径或相对具名路径
path :
  rootPathSegment (Colon Colon plainPath)? #fromRootPath
  | cratePathSegment (Colon Colon plainPath)? #fromCratePath
  | superPathSegment ( Colon Colon superPathSegment)* (Colon Colon plainPath)? #fromSuperPath
  | plainPath #plainPath
;

terminalPathItem :
   identifier // not function type,module scope,typeAlias
   | Function Colon identifier // function
   | Var Colon identifier // var
;

linearPathItem :
   terminalPathItem
   | plainPath Colon Colon  terminalPathItem
   | rootPathSegment
   | rootPathSegment Colon Colon terminalPathItem
   | rootPathSegment Colon Colon plainPath Colon Colon terminalPathItem
   | cratePathSegment
   | cratePathSegment Colon Colon terminalPathItem
   | cratePathSegment Colon Colon plainPath Colon Colon  terminalPathItem
   | superPathSegment ( Colon Colon superPathSegment)*
   | superPathSegment ( Colon Colon superPathSegment)* Colon Colon terminalPathItem
   | superPathSegment ( Colon Colon superPathSegment)*
     Colon Colon plainPath Colon Colon  terminalPathItem
;

childTreePathItem :
  (plainPath Colon Colon)? terminalPathItem #linearChildTreePathItem
  |  plainPath Colon Colon
     LeftBrace
         childTreePathItem  (Comma childTreePathItem)*
     RightBrace
     #notLinearChildTreePathItem
;
treePathItem :
  path Colon Colon
    LeftBrace
       childTreePathItem (Comma childTreePathItem)*
    RightBrace
;
pathItem : linearPathItem | treePathItem ;

useChildTreePathItem :
    (plainPath Colon Colon)? terminalPathItem (As identifier)? #linearUseChildTreePathItem
    |  plainPath Colon Colon
       LeftBrace
           useChildTreePathItem  (Comma useChildTreePathItem)*
       RightBrace
       #notLinearUseChildTreePathItem
;
useTreePathItem :
   path Colon Colon
      LeftBrace
         useChildTreePathItem (Comma useChildTreePathItem)*
      RightBrace
;
usePathItem : linearPathItem (As identifier)? |  useTreePathItem ;

// --------------------path end-------------------------

// --------------------type start-------------------------

/*
function(params)->retType是Reference<const function(params)->retType>别名.
*/
variableParameterType : Dot Dot Dot ;
normalParameterType : instanceTypeName ;
parameterTypeList :
  variableParameterType
  | normalParameterType (Comma normalParameterType)* (Comma variableParameterType)?
;
functionReturnType : MinusSign GreaterThanSign instanceTypeName ;
functionInstanceTypeName :
  Function LeftParen parameterTypeList? RightParen functionReturnType?
;
notFunctionInstanceTypeName : Const? plainNotFunctionInstanceTypeName ;
instanceTypeName : notFunctionInstanceTypeName | functionInstanceTypeName ;

// plainInstanceTypeName
normalPlainParameterType : plainInstanceTypeName ;
plainParameterTypeList :
  variableParameterType
  | normalPlainParameterType (Comma normalPlainParameterType)* (Comma variableParameterType)?
;
plainFunctionReturnType : MinusSign GreaterThanSign plainInstanceTypeName ;
plainFunctionInstanceTypeName :
   Function LeftParen plainParameterTypeList? RightParen plainFunctionReturnType ;
plainNotFunctionInstanceTypeName :
  ( plainPath Colon Colon )? identifier genericArguments?
;
plainInstanceTypeName :
  plainNotFunctionInstanceTypeName | plainFunctionInstanceTypeName
;

// --------------------type end-------------------------

// --------------------statement start-------------------------

typeAliasStatement :
    visibility? Type identifierPattern EqualsSign  plainInstanceTypeName  Semi
;

useDeclarationStatement : Use usePathItem Semi ;

emptyStatement :
   Semi
;

expressionStatement :
   expression Semi
;

returnStatement :
     Return expression? Semi
;

variableDeclarator :
  variableDeclaratorPattern (Colon instanceTypeName)? (EqualsSign expression)?
;

letStatement :
   Let variableDeclarator (Comma variableDeclarator)* Semi
;

iteratorLoopStatement :
   For pattern In expression blockAsPartOfStatement
;

forLoopStatement :
  For LeftParen statement expressionStatement statement RightParen blockAsPartOfStatement
;

predicateLoopStatement :
   While expression blockAsPartOfStatement
;

infiniteLoopStatement :
  Loop blockAsPartOfStatement
;

breakStatement :
  Break Semi
;

continueStatement :
  Continue  Semi
;

loopStatement :
  iteratorLoopStatement
  | forLoopStatement
  | predicateLoopStatement
  | infiniteLoopStatement
;

blockStatement :
 LeftBrace blockStatementItem* RightBrace
;

ifThenStatement :
   If expression  blockAsPartOfStatement
;

ifThenElseStatement :
   If  expression  blockAsPartOfStatement Else blockAsPartOfStatement
;

ifStatement :
 ifThenStatement
 | ifThenElseStatement
;

matchStatement :
  Match expression LeftBrace matchArm+ RightBrace
;

matchArm :
   pattern EqualsSign GreaterThanSign LeftBrace statement? RightBrace
;

// (useDeclarationStatement,typeAliasStatement)只用于module起始部分，不算做常规语句。
statement :
  emptyStatement
  | expressionStatement
  | letStatement
  | returnStatement
  | loopStatement
  | breakStatement
  | continueStatement
  | blockStatement
  | ifStatement
  | matchStatement
;

blockAsPartOfStatement :
  LeftBrace blockAsPartOfStatementItem* RightBrace
;

blockAsPartOfStatementItem :
   typeDefinition
   | statement
;

blockStatementItem :
   typeDefinition
   | statement
;

// --------------------statement end--------------------------

// --------------------pattern start--------------------------

pattern :
     patternNoTopAlt (VerticalBar patternNoTopAlt)*
;

patternNoTopAlt :
   identifierPattern
   | fieldTypePattern
;

identifierPattern :
   identifier
;

fieldTypePattern :
   instanceTypeName LeftBrace fieldTypePatternElements? RightBrace
;

fieldTypePatternElements :
   fieldTypePatternFields
;

fieldTypePatternFields :
  fieldTypePatternField (Comma fieldTypePatternField)*
;

fieldTypePatternField :
   identifier Colon pattern
;

// variableDeclarator
variableDeclaratorPattern :
   identifierPattern
;

// --------------------pattern end--------------------------

// --------------------annotation start-------------------------

annotationInstanceTypeName : ( plainPath Colon Colon )? identifier ;
annotationInitListValue : constLiteral | annotationInstanceTypeName? annotationInitList ;
annotationInitListField : identifier Colon annotationInitListValue ;
annotationInitList :
  LeftBrace RightBrace #emptyAnnotationInitList
  | LeftBrace annotationInitListField ( Comma annotationInitListField )* RightBrace #fieldsAnnotationInitList
  | LeftBrace annotationInitListValue ( Comma annotationInitListValue )* RightBrace #valuesAnnotationInitList
;
markerAnnotation : AtSign annotationInstanceTypeName ;
normalAnnotation : AtSign annotationInstanceTypeName annotationInitList ;
annotation : markerAnnotation | normalAnnotation ;

// --------------------annotation end-------------------------

// --------------------function start-------------------------

selfParameter : annotation* Const? SelfValue ;
normalParameter : annotation* identifier Colon instanceTypeName ;
variableParameter : Dot Dot Dot ;
parameters :
   selfParameter (Comma normalParameter)* (Comma variableParameter)?
  | normalParameter (Comma normalParameter)* (Comma variableParameter)?
;

functionBodyItem : typeDefinition | statement ;
functionBody : LeftBrace functionBodyItem* RightBrace ;
functionModifiers : annotation* visibility? ;

functionDefinition :
   functionModifiers? Function identifier genericParameters? LeftParen parameters? RightParen
   functionReturnType? functionBody
;
functionDeclaration :
   functionModifiers? Function identifier genericParameters? LeftParen parameters? RightParen
   functionReturnType? Semi
;
anonymousFunction :
  Function  LeftParen parameters? RightParen functionReturnType? functionBody #anonymousFunction
  | LeftParen parameters? RightParen MinusSign GreaterThanSign instanceTypeName? functionBody  #lambdaFunction
;
// --------------------function end---------------------------

// --------------------type definition start------------------------

superType : Extends plainNotFunctionInstanceTypeName ;
typeModifiers : annotation* visibility? ;

fieldModifiers : annotation* visibility? ;
field : fieldModifiers? identifier Colon instanceTypeName ;
fieldList : field (Comma field)* ;

fieldTypeDefinitionBody : LeftBrace fieldList? RightBrace ;

structDefinition :
   typeModifiers? Struct identifier genericParameters? fieldTypeDefinitionBody
;

classDefinition :
   typeModifiers? Class identifier genericParameters? superType? fieldTypeDefinitionBody
;

annotationDefinition :
   typeModifiers? Annotation identifier fieldTypeDefinitionBody
;

enumDefinition :
  typeModifiers? Enum identifier genericParameters? enumTypeDefinitionBody
;

traitDefinition :
  traitModifiers? Trait identifier genericParameters? extendsTraits? traitBody
;

// -- enum --
enumField : identifier Colon instanceTypeName ;
enumFieldList : enumField (Comma enumField)* ;
enumItemAttachment : LeftBrace enumFieldList RightBrace ;
enumItem : identifier enumItemAttachment? ;
enumItemList : enumItem (Comma enumItem)* ;
enumTypeDefinitionBody : LeftBrace enumItemList RightBrace ;
// -- enum end --

// --tarit --
extendsTraits :
  Extends plainNotFunctionInstanceTypeName (Comma plainNotFunctionInstanceTypeName)*
;
traitModifiers : annotation* visibility? ;
traitBodyItem : functionDefinition | functionDeclaration ;
traitBody : LeftBrace traitBodyItem* RightBrace ;
// --tarit end --

typeDefinition :
     functionDefinition
     | structDefinition
     | annotationDefinition
     | classDefinition
     | enumDefinition
     | traitDefinition
     | inherentImplementation
     | traitImplementation
;


// --------------------type definition end--------------------------

// --------------------implementation start-------------------------

implementationModifiers : annotation* ;
implementationBodyItem : functionDefinition ;
implementationBody : LeftBrace implementationBodyItem* RightBrace ;

inherentImplementation :
  implementationModifiers? Implement genericParameters? plainNotFunctionInstanceTypeName
  implementationBody
;

traitImplementation :
  implementationModifiers? Implement genericParameters? plainNotFunctionInstanceTypeName For
  plainNotFunctionInstanceTypeName implementationBody
;

// --------------------implementation end---------------------------

// --------------------module start---------------------------

moduleModifiers : annotation* visibility? ;
visibilityArguments : LeftParen pathItem ( Comma pathItem)* RightParen ;
visibility : Public visibilityArguments? ;
moduleBodyItem :
     module
     | typeDefinition
     | letStatement
;
moduleBody :
  LeftBrace useDeclarationStatement* typeAliasStatement* moduleBodyItem* RightBrace
;
moduleIdentifier : ( plainPath Colon Colon )? identifier ;
module :
    moduleModifiers? Module moduleIdentifier moduleBody
;
compilationUnit : module+ ;

// --------------------module end---------------------------

// --------------------expression start-------------------------

literalExpression :
   UnsignedIntegerLiteral
   | UnsignedFloatingPointNumberLiteral
   | CharLiteral
   | StringLiteral
;

expression :
   assignmentExpression
;

assignmentExpression :
  conditionalOrExpression
	|	leftValueExpression assignmentOperator expression
;

leftValueExpression :
     (plainPath Colon Colon)? identifier
;

assignmentOperator :
  EqualsSign
  | PlusSign EqualsSign
  | MinusSign EqualsSign
  | Asterisk EqualsSign
  | Slash EqualsSign
  | PercentSign EqualsSign
  | Ampersand EqualsSign
  | Caret EqualsSign
  | Ampersand EqualsSign
  |	LessThanSign LessThanSign EqualsSign
  |	GreaterThanSign GreaterThanSign EqualsSign
  |	GreaterThanSign GreaterThanSign GreaterThanSign EqualsSign
;

conditionalOrExpression :
  conditionalAndExpression
	|	conditionalOrExpression VerticalBar VerticalBar conditionalAndExpression
;

conditionalAndExpression :
  inclusiveOrExpression
	|	conditionalAndExpression Ampersand Ampersand inclusiveOrExpression
;

inclusiveOrExpression :
  exclusiveOrExpression
	|	inclusiveOrExpression VerticalBar exclusiveOrExpression
;

exclusiveOrExpression :
  andExpression
	|	exclusiveOrExpression Caret andExpression
;

andExpression :
  equalityExpression
	|	andExpression Ampersand equalityExpression
;

equalityExpression :
  relationalExpression
	|	equalityExpression EqualsSign EqualsSign relationalExpression
	|	equalityExpression ExclamationMark EqualsSign relationalExpression
;

relationalExpression :
  shiftExpression
	|	relationalExpression LessThanSign shiftExpression
	|	relationalExpression GreaterThanSign shiftExpression
	|	relationalExpression LessThanSign EqualsSign shiftExpression
	|	relationalExpression GreaterThanSign EqualsSign shiftExpression
;

shiftExpression :
  additiveExpression
	|	shiftExpression LessThanSign LessThanSign additiveExpression
	|	shiftExpression GreaterThanSign GreaterThanSign additiveExpression
	|	shiftExpression GreaterThanSign GreaterThanSign GreaterThanSign additiveExpression
;

additiveExpression :
  multiplicativeExpression
	|	additiveExpression PlusSign multiplicativeExpression
	|	additiveExpression MinusSign multiplicativeExpression
;

multiplicativeExpression :
  unaryExpression
	|	multiplicativeExpression Asterisk unaryExpression
	|	multiplicativeExpression Slash unaryExpression
	|	multiplicativeExpression PercentSign unaryExpression
;

unaryExpression :
	unaryExpressionNotPlusMinus
  | PlusSign unaryExpression
	|	MinusSign unaryExpression
;

unaryExpressionNotPlusMinus :
  primaryExpression
	|	Tilde unaryExpression
	|	ExclamationMark unaryExpression
	;

primaryExpression :
	leftValueExpression
	| literalExpression
  | SelfValue
  | methodInvocation
  | LeftParen expression RightParen
  | anonymousFunction
  | initListExpression
;

methodInvocation :
   expression LeftParen argumentList? RightParen
;
argumentList : expression (Comma expression)* ;

initListExpression : instanceTypeName? initList ;
initList :
  LeftBrace RightBrace #emptyInitList
  | LeftBrace initListField ( Comma initListField )* RightBrace #fieldsInitList
  | LeftBrace expression ( Comma expression )* RightBrace #valuesInitList
;
initListField : identifier Colon expression ;

// --------------------expression end-------------------------

// ---------------------word start----------------------

keyWord :
  Crate |
  Super |
  SelfValue |
  Module |
  Use |
  Type |
  Var |
  Struct |
  Annotation |
  Enum |
  Class |
  Function |
  Trait |
  SelfType |
  Public |
  Const |
  // Mut |
  Implement |
  Extends |
  Let |
  As |
  Loop |
  While |
  For |
  In |
  Continue |
  Break |
  Match |
  If |
  Else |
  Return
;

identifier :
  Identifier | keyWord
;
// ---------------------word end------------------------


@NonterminalGrammar end ;